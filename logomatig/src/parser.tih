type tokens = { token : string, arg : int , next : tokens }
function parser(x : int, y : int) : tokens =
(
    let
        import "token.tih"
        import "execute.tih"
        var ntoken : string := ""
        var itoken : int := 0
        var cmds : arr_of_str := arr_of_str[2] of ""
        var token_list : tokens := nil
        var cur_token : tokens := nil
        var new_token : tokens := nil
        var pos := cursor { xpos = x, ypos = y, angle = 0}
    in
    (
        cmds[0] := "forward";
        cmds[1] := "left";
        cmds[2] := "right";
        cur_token := token_list;
        ntoken := get_token();
        while ntoken <> "" do
        (
            if(is_token(cmds, ntoken) = 0) then
            (
                print_err("Invalid token ");
                print_err(ntoken);
                exit(-1)
            );
            itoken := get_token_int();
            if itoken = -1 then
            (
                print_err("Invalid token - number ");
                exit(-1)
            );
            if token_list = nil then
                token_list := tokens {token = ntoken, arg = itoken, next = nil}
            else
                token_list := tokens {token = ntoken, arg = itoken, next = token_list};
            ntoken := get_token()
        );
        print("\n\n");
        print_tokens(token_list);

        execute(token_list, pos);
        token_list
    )
    end
)
